# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#image: gcc

# insert hook for execution of clang-tidy before execution of any code_standards including exclusion of third-party headers
build:
   stage: test
   script:
      - echo "Beginning the build for the oci-tool Project"
      - echo "$CI_BUILDS_DIR"
      #- cd ../; cmake $CI_BUILDS_DIR
      #- make
      #- make test
      # figure out how to bail out on exit status

#   stage: code_standards
   # insert execution of clang-tidy here unless nolint is specified
   # insert readout of clang-tidy-report here
   # insert execution of clang-format here
   # writeback clang-format

#  stage: build
#  # instead of calling g++ directly you can also use some build toolkit like make
#  # install the necessary build tools when needed
#  # before_script:
#  #   - apt update && apt -y install make autoconf
#  script:
#    - g++ helloworld.cpp -o mybinary
#    - cmake ..; make; cd ..
#  artifacts:
#    paths:
#      - mybinary
#      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
#      # cache:
#      #   paths:
#      #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh