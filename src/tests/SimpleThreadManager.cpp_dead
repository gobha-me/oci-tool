#define CATCH_CONFIG_MAIN // This tells Catch to provide a main() - only do this in one cpp file
#include "catch2/catch.hpp"
#include <atomic>
#include <gobha/SimpleThreadManager.hpp>
#include <iostream>

// clang-format off
//CMAKE_DEP=pthread
// clang-format on

TEST_CASE( "SimpleThreadManager" ) {
  spdlog::set_level(spdlog::level::trace);
  spdlog::set_pattern( "[%H:%M:%S] [%^%l%$] [thread %t] %v" );

//  SECTION( "Foreground Breaker" ) {
//    gobha::SimpleThreadManager stm{ 1 };
//    std::atomic< int >         value1{ 0 };
//
//    auto ep = stm.executionPool( "Test Case Foreground Breaker 1" );
//
//    ep.execute( [ &stm, &value1 ]() {
//      auto ep = stm.executionPool( "Test Case Foreground Breaker 2" );
//      ep.execute( [ &stm, &value1 ]() {
//        auto ep = stm.executionPool( "Test Case Foreground Breaker 3" );
//        ep.execute( [ &stm, &value1 ]() {
//          auto ep = stm.executionPool( "Test Case Foreground Breaker 4" );
//          ep.execute( [ &value1 ]() {
//            std::cout << "Foreground Value add " << value1 << std::endl;
//            value1++;
//          } );
//        } );
//      } );
//    } );
//
//    REQUIRE( value1 == 1 );
//  }

//  SECTION( "Background Breaker" ) {
//    gobha::SimpleThreadManager stm{};
//    std::atomic< int >         value{ 0 };
//
//    auto ep_outter = stm.executionPool( "Test Case Background Breaker Outter" );
//
//    for ( std::uint16_t i = 0; i != 8; i++ ) {
//      ep_outter.background( [ &stm, &value, v = i ]() {
//        auto ep_inner = stm.executionPool( "Test Case Background Breaker Inner " + std::to_string( v ) );
//        value++;
//
////        ep_inner.execute( [ &value, t = v ]() {
////          spdlog::info( "Background Value add Inner execution {}", t );
////        } );
//      } );
//    }
//
//    REQUIRE( value == 8 );
//  }
}
